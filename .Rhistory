# Function to approximate the delta function
delta_approx <- function(t, width = 0.001, height = 1/width) {
ifelse(abs(t) < width/2, height, 0)
}
# Create a data frame for plotting
t <- seq(-10, 10, by = 0.01)
df <- data.frame(t = t, u = ifelse(t >= 0, 1, 0), delta_approx = delta_approx(t))
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 1) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_classic()
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 1) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_classic()
delta
library(ggplot2)
library(plotly)
library(ggthemes)
# Function to approximate the delta function
delta_approx <- function(t, width = 0.001, height = 1/width) {
ifelse(abs(t) < width/2, height, 0)
}
# Create a data frame for plotting
t <- seq(-10, 10, by = 0.01)
df <- data.frame(t = t, u = ifelse(t >= 0, 1, 0), delta_approx = delta_approx(t))
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 1) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_classic()
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 1) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_classic()
delta
u
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 1) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 2) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 3) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 4) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 4) +
geom_point(aes(y = delta_approx), color = "blue", shape =3) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 4) +
geom_point(aes(y = delta_approx), color = "blue", shape =1) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 4) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_dark()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 4) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_solid()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 4) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_stata()
delta
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 3) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_stata()
u
u
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 3, size = 3) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_stata()
u
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 3, size = 2) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_stata()
u
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 3, size =2) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_stata()
delta
# Function to approximate the delta function
delta_approx <- function(t, width = 0.00001, height = 1/width) {
ifelse(abs(t) < width/2, height, 0)
}
# Create a data frame for plotting
t <- seq(-10, 10, by = 0.01)
df <- data.frame(t = t, u = ifelse(t >= 0, 1, 0), delta_approx = delta_approx(t))
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 3, size = 2) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_stata()
u
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 3, size =2) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_stata()
delta
# Function to approximate the delta function
delta_approx <- function(t, width = 0.01, height = 1/width) {
ifelse(abs(t) < width/2, height, 0)
}
# Create a data frame for plotting
t <- seq(-10, 10, by = 0.01)
df <- data.frame(t = t, u = ifelse(t >= 0, 1, 0), delta_approx = delta_approx(t))
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 3, size = 2) +
labs(title = "Unit Step",
x = "Time (t)", y = "Value") +
theme_stata()
u
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 3, size =2) +
labs(title = "Kronecker Delta",
x = "Time (t)", y = "Value") +
theme_stata()
delta
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 3, size =2) +
labs(title = "Kronecker Delta",
x = "[n]", y = "Value") +
theme_stata()
library(ggplot2)
library(plotly)
library(ggthemes)
# Function to approximate the delta function
delta_approx <- function(t, width = 0.01, height = 1/width) {
ifelse(abs(t) < width/2, height, 0)
}
# Create a data frame for plotting
t <- seq(-10, 10, by = 0.01)
df <- data.frame(t = t, u = ifelse(t >= 0, 1, 0), delta_approx = delta_approx(t))
# Plot the unit step and approximate delta functions
u <- ggplot(df, aes(x = t)) +
geom_line(aes(y = u), color = "blue", linetype = 3, size = 2) +
labs(title = "Unit Step",
x = " [n]", y = "Value") +
theme_stata()
u
delta <- ggplot(df,aes(x = t)) +
geom_line(aes(y = delta_approx), color = "blue", linetype = 3, size =2) +
labs(title = "Kronecker Delta",
x = "[n]", y = "Value") +
theme_stata()
delta
u
help(factor)
classes <- factor(x = c("Red","Red","Red","Green","Green","Red"),
levels = c("R","G"))
classes
classes
classes <- factor(x = c("Red","Red","Red","Green","Green","Red"),
levels = c("Red","Green"))
classes
df <- data.frame(X1 = c(0,2,0,0,-1,1),
X2 = c(3,0,1,1,0,1),
X3 = c(0,0,3,2,1,1),
Y = classes)
df
install.packages(rgl)
install.packages("rgl")
library(rgl)
plot3d(df)
plot3d(x = df$X1,y = df$X2, z=df$X3m colors = df$Y)
plot3d(x = df$X1,y = df$X2, z=df$X3, colors = df$Y)
plot3d(x = df$X1,y = df$X2, z=df$X3, colors = df$Y)
plot3d(x = df$X1,y = df$X2, z=df$X3, col = df$Y)
plot3d(x = df$X1,y = df$X2, z=df$X3, col = df$Y, size = 2)
plot3d(x = df$X1,y = df$X2, z=df$X3, col = df$Y, radius = 2)
plot3d(x = df$X1,y = df$X2, z=df$X3, col = df$Y, radius = .1, type = 's')
library(class)
help(class)
help(knn)
model <- knn(train = df[1:3], test = c(0,0,0), cl = df$Y, k = 1)
model
model <- knn(train = df[1:3], test = c(0,0,0), cl = df$Y, k = 3)
model
summary(model)
print(model)
plot(model)
library(rgl)
classes <- factor(x = c("Red","Red","Red","Green","Green","Red"),
levels = c("Red","Green"))
df <- data.frame(X1 = c(0,2,0,0,-1,1),
X2 = c(3,0,1,1,0,1),
X3 = c(0,0,3,2,1,1),
Y = classes)
plot3d(x = df$X1,y = df$X2, z=df$X3, col = df$Y, radius = .1, type = 's')
library(class)
model <- knn(train = df[1:3], test = c(0,0,0), cl = df$Y, k = 3)
model
# Chunk 1: global_options
knitr::opts_chunk$set(echo = T, warning=FALSE, message=FALSE)
# Chunk 2
htmltools::img(src = knitr::image_uri(file.path("uc3m.jpg")),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px;',
width="600",
height="80")
# Chunk 3
library(tidyverse)
library(leaflet)
library(mapboxapi)
library(sf)
library(readxl)
library(rgdal)
library(stringr)
# Chunk 4
url = "https://infoelectoral.interior.gob.es/estaticos/docxl/apliextr/02202307_MESA.zip"
temp <- tempfile()
download.file(url,dest="data/MESA.zip")
unzip("data/MESA.zip", exdir = "data/")
# Chunk 5
participacion <- read.fwf("data/09022307.DAT",
widths=c(2,4,2,1,
2,2,3,2,4,1,
7,7,7,7,7,7,7,7,7,7,7,
1),
colClasses=c(rep("numeric",4),
rep("character",6),
rep("numeric",11),
"character"))
colnames(participacion) <- c("tipo","year","month","vuelta","ccaa","provincia","municipio","distrito","seccion","mesa","censo","censo_escrutinio","censo_cere","total_cere","votantes_primer","votantes_segundo","blanco","nulos","votos","afirmativos","negativos","datos_oficiales")
# Chunk 6
dim(participacion)
head(participacion)
# Chunk 7
participacion = participacion %>%
select(ccaa, provincia, municipio, distrito, seccion, censo, votos) %>%
filter(ccaa<99, provincia<99, municipio<999)
# Chunk 8
participacion = participacion %>%
mutate(CUSEC = str_trim(paste0(participacion$provincia,participacion$municipio,participacion$distrito,participacion$seccion)))
# Chunk 9
dim(participacion)
head(participacion)
# Chunk 10
participacion$ccaa = as.factor(participacion$ccaa)
participacion$provincia = as.factor(participacion$provincia)
# Chunk 11
participacion %>% ggplot(aes(x=ccaa,y=censo)) + geom_boxplot(fill="lightblue")
# Chunk 12
part.aggr = participacion %>%
group_by(provincia,municipio,distrito,seccion,CUSEC) %>%
summarize(total_votos=sum(votos),total_censo=sum(censo)) %>%
mutate(total_part = total_votos/total_censo)
# Chunk 13
dim(part.aggr)
head(part.aggr)
# Chunk 14
part.aggr %>% ggplot(aes(x=total_part)) +
geom_boxplot(fill="lightblue", color="blue", outlier.color = "red", outlier.shape = 16) +
scale_x_continuous(labels = scales::percent_format(scale = 100)) + theme_minimal()
# Chunk 15
mu <- mean(part.aggr$total_part)
sigma <- sd(part.aggr$total_part)
sum(part.aggr$total_part < mu - 3*sigma | part.aggr$total_part > mu + 3*sigma)
# Chunk 16
QI <- quantile(part.aggr$total_part, 0.25)
QS <- quantile(part.aggr$total_part, 0.75)
IQR = QS-QI
sum(part.aggr$total_part < QI - 1.5*IQR | part.aggr$total_part > QS + 1.5*IQR)
# Chunk 17
limits <- read_sf("data/LimitesCensoINE/SECC_CE_20200101.shp") %>%
# just in case we want to filter by CCAA
# filter(NCA == "Comunidad de Madrid") %>%
sf::st_transform('+proj=longlat +datum=WGS84')
# Chunk 18
datos.mapa <- merge(limits,part.aggr,by="CUSEC")
# Chunk 20
renta = read_excel('data/RentaMadrid31097_2021.xlsx', skip=8, col_names = F, trim_ws=T,col_types=c("text", "numeric"))
renta$CUSEC = substr(renta$...1, 1, 10)
renta$rentaMedia = renta$...2
renta = renta %>% select(CUSEC, rentaMedia)
# Chunk 21
dim(renta)
head(renta)
# Chunk 22
datos.madrid = filter(datos.mapa, provincia == 28) # just Madrid
datos.madrid <- merge(datos.madrid, renta, by="CUSEC")
# Chunk 23
pal <- colorNumeric("Greens", datos.madrid$rentaMedia, na.color="white")
labels = paste(datos.madrid$NMUN, "<br>", "SecciÃ³n censal: ", datos.madrid$CUSEC, "<br>",
"Renta: ", datos.madrid$rentaMedia,"<br>",
"ParticipaciÃ³n: ", round(datos.mapa$total_part*100,2), "%") %>%
lapply(htmltools::HTML)
leaflet(datos.madrid) %>%
addMapboxTiles(style_id = "streets-v11",
username = "mapbox") %>%
setView(lng = -3.703752,
lat = 40.416926,
zoom = 9) %>%
addPolygons(fillColor = ~ pal(rentaMedia),fillOpacity = 0.6,color = "white",weight = .5,
opacity = 1, smoothFactor = 0.2,stroke=T,
label = ~ labels,
highlightOptions = highlightOptions(color = "black",
weight = 2,
bringToFront = F))
# Chunk 24
library(plotly)
p = datos.madrid %>%
ggplot(aes(x = rentaMedia, y = total_part, label=NMUN, size=total_censo, color=rentaMedia, fill=rentaMedia))  +
scale_x_continuous(n.breaks = 8) +
scale_y_continuous(n.breaks = 8,labels = scales::percent) +
geom_point(alpha=0.5) + scale_size(range = c(0, 3)) +
scale_colour_gradientn(colours = c("red","lightgreen")) +
labs(title = "ParticipaciÃ³n elecciones vs renta media", subtitle="Basado en datos de 2019", x = "Renta media neta anual per capita", y = "Porcentaje participaciÃ³n", caption="Fuente: INE") +
theme_minimal() +
theme(panel.grid.major.y = element_line(color = '#55565B', linetype = "dotted"),panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),panel.grid.minor.x = element_line(color = '#55565B', linetype = "dotted"),
plot.title=element_text(size=20), legend.position="none")
ggplotly(p)
# Chunk 25
demog = read_excel('data/DemograficoMadrid31105.xlsx', skip=8, col_names = F, trim_ws=T,col_types=c("text", "numeric", "numeric", "numeric"))
demog$CUSEC = substr(demog$...1, 1, 10)
demog$EdadMedia = demog$...2
demog$Poblacion = demog$...3
demog$PoblacionEsp = demog$...4
demog = demog %>% select(CUSEC, EdadMedia, Poblacion, PoblacionEsp)
datos.madrid <- merge(datos.madrid, demog, by="CUSEC")
# Chunk 26
p = datos.madrid %>%
ggplot(aes(x = rentaMedia, y = total_part, label=NMUN, size=total_censo, color=EdadMedia, fill=PoblacionEsp))  +
scale_x_continuous(n.breaks = 8) +
scale_y_continuous(n.breaks = 8,labels = scales::percent) +
geom_point(alpha=0.5) +  scale_size(range = c(0, 3)) +
scale_colour_gradientn(colours = c("lightgreen", "red")) +
labs(title = "ParticipaciÃ³n elecciones vs renta media", subtitle="Basado en datos de 2019", x = "Renta media neta anual per capita", y = "Porcentaje participaciÃ³n") +
theme_minimal() +
theme(panel.grid.major.y = element_line(color = '#55565B', linetype = "dotted"),panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank(),panel.grid.minor.x = element_line(color = '#55565B', linetype = "dotted"),
plot.title=element_text(size=20), legend.position="none")
ggplotly(p)
# Chunk 27
library(mice)
md.pattern(select(st_set_geometry(datos.madrid, NULL), c(total_part, rentaMedia, EdadMedia, Poblacion)))
# Chunk 28
datos.madrid$edad_imp_median = datos.madrid$EdadMedia
datos.madrid$edad_imp_median[is.na(datos.madrid$EdadMedia)] = median(datos.madrid$EdadMedia, na.rm=T)
# Chunk 29
datos.madrid = datos.madrid %>% group_by(CMUN) %>%
mutate(edad_imp_mun=ifelse(is.na(EdadMedia),median(EdadMedia,na.rm=TRUE),EdadMedia))
# Chunk 30
set.seed(42)
mice.obj=mice(st_set_geometry(datos.madrid, NULL)[,c(25,27,28,29,30,31)], method = 'rf')
mice.obj.imp=mice::complete(mice.obj)
datos.madrid$EdadMedia = mice.obj.imp$EdadMedia
datos.madrid$rentaMedia = mice.obj.imp$rentaMedia
datos.madrid$PoblacionEsp = mice.obj.imp$PoblacionEsp
# Chunk 31
multiple.lm = lm(total_part ~ log(rentaMedia) + poly(EdadMedia,2) + poly(PoblacionEsp,2), datos.madrid)
multiple.lm %>% summary()
pred = predict(multiple.lm)
resid = datos.madrid$total_part-pred
qplot(datos.madrid$rentaMedia, pred, main="Prediction model")
qplot(datos.madrid$EdadMedia, pred, main="Prediction model")
qplot(datos.madrid$PoblacionEsp, pred, main="Prediction model")
# Chunk 32
qplot(pred, datos.madrid$total_part) + labs(title="Observed VS Predicted", x="Predicted", y="Observed") + geom_abline(intercept = 0, slope = 1, colour = "blue") + theme_bw()
# Chunk 33
resid %>% as.data.frame() %>% ggplot(aes(x=resid)) + geom_boxplot(fill="lightblue")
# Chunk 34
library(outliers)
idx = outlier(resid, logical=T)
# outliers
datos.madrid[idx,c("NMUN", "CSEC", "CDIS",  "total_part","rentaMedia", "EdadMedia")]
# Chunk 35
datos.madrid$rentaNormalized <- (datos.madrid$rentaMedia - min(datos.madrid$rentaMedia))/(max(datos.madrid$rentaMedia) - min(datos.madrid$rentaMedia))
summary(datos.madrid$rentaNormalized)
# Chunk 36
datos.madrid$rentaScaled  <- scale(datos.madrid$rentaMedia)
summary(datos.madrid$rentaScaled)
install.packages("rmarkdownViewer")
rmarkdown::render("your_file.Rmd")
install.packages("tidyverse")
install.packages("leafleat")
install.packages("leaflet")
install.packages("mapboxapi")
install.packages("sf")
install.packages("rgdal")
install.packages("stringr")
install.packages("rgdal")
install.packages("rgdal", type="source")
pwd
rm(list=ls())
install.packages("quantmod")
dev.off()
apple.df <- getSymbols("APPL",src="yahoo",auto.assign=FALSE)
library(quantmod)
apple.df <- getSymbols("APPL",src="yahoo",auto.assign=FALSE)
apple.df <- getSymbols("AAPL",src="yahoo",auto.assign=FALSE)
chartSeries(apple_df)
chartSeries(apple.df)
View(apple.df)
chartSeries(apple_df, name="AAPL", subset="last 6 months", theme=chartTheme("white"))
chartSeries(apple_df, name="AAPL", subset="last 6 months", theme=chartTheme("white"))
chartSeries(apple.df, name="AAPL", subset="last 6 months", theme=chartTheme("white"))
chartSeries(apple.df, name="AAPL", subset="last 6 months", theme=chartTheme("white"),bar.type="ohlc")
setwd("~/UC3M/Course_2/Projects")
library(tidyverse)
library(ggplot2)
# Load the data
data <- read.csv("dataco/DataCoSupplyChainDataset.csv")
rm(list=ls())
# Load the data
data <- read.csv("dataco/DataCoSupplyChainDataset.csv")
# Take a look at the structure and dimension
head(data)
dim(data)
str(data)
copy$order.date..DateOrders. <- as.POSIXct(copy$order.date..DateOrders., "%m/%d/%Y %H:%M")
copy <- data
copy$order.date..DateOrders. <- as.POSIXct(copy$order.date..DateOrders., "%m/%d/%Y %H:%M")
copy$order.date..DateOrders. <- as.POSIXct(copy$order.date..DateOrders., format = "%m/%d/%Y %H:%M")
str(copy)
copy$order.date..DateOrders. <- as.POSIXct(copy$shipping.date..DateOrders., format = "%m/%d/%Y %H:%M")
# Data preprocessing
copy %>% rename("PaymentType", "Type")
# Data preprocessing
copy %>% rename("Type", "PaymentType")
help(renae)
help(rename)
# Data preprocessing
rename(data, "PaymentType", "Type")
# Data preprocessing
rename(data, "Type", "PaymentType")
# Data preprocessing
colnames(copy)
str(copy)
unique(data$Category.Id)
unique(data$Customer.City)
install.packages("leafleat")
install.packages("leaflet")
install.packages("ggmap")
# Drop unnecessary columns
copy %>%
select(!c(Customer.Fname, Customer.Lname, Customer.Password, Category.Id, Customer.Email, Customer.Password, Customer.Street, Order.Customer.Id, Department.Id, Customer.Zipcode, Order.Id, Order.Item.Id, Order.Item.Cardprod.Id, Order.Zipcode, Product.Description, Product.Image))
copy
# Drop unnecessary columns
copy <- copy %>%
select(!c(Customer.Fname, Customer.Lname, Customer.Password, Category.Id, Customer.Email, Customer.Password, Customer.Street, Order.Customer.Id, Department.Id, Customer.Zipcode, Order.Id, Order.Item.Id, Order.Item.Cardprod.Id, Order.Zipcode, Product.Description, Product.Image))
str(copy)
library(tidyverse)
library(ggplot2)
library(caTools)
# Load the data
data <- read.csv("dataco/DataCoSupplyChainDataset.csv")
copy <- data
# Take a look at the structure and dimension
head(data)
dim(data)
str(data)
colnames(copy)
# Data preprocessing
# Drop unnecessary columns
copy <- copy %>%
select(!c(Customer.Fname, Customer.Lname, Customer.Password, Customer.Id, Product.Category.Id, Category.Id, Customer.Email, Customer.Password, Customer.Street, Order.Customer.Id, Department.Id, Customer.Zipcode, Order.Id, Order.Item.Id, Order.Item.Cardprod.Id, Order.Zipcode, Product.Description, Product.Image))
preprocessing_pipeline <- function(data) {
data
return(data)
}
data$order.date..DateOrders. <- as.POSIXct(data$order.date..DateOrders., format = "%m/%d/%Y %H:%M")
data$order.date..DateOrders. <- as.POSIXct(data$shipping.date..DateOrders., format = "%m/%d/%Y %H:%M")
