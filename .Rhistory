group_by(Shipping.Order) %>%
summarise(DaysReal = sum(Days.for.shipping..real.),
DaysScheduled = sum(Days.for.shipment..scheduled.)
)
shipping_days_time_data
shippings_time <- ggplot(shipping_days_time_data, aes(x = Date.Order, y = TotalQuantity)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date", y = "Total Quantity ordered", title = "Evolution of quantity ordered per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
shippings_time
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +   # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) +  # Line for DaysScheduled
labs(
x = "Date", y = "Days",
title = "Evolution of Days: Real vs Scheduled",
color = "Legend"
) +
scale_color_manual(values = c("Days Real" = "blue", "Days Scheduled" = "green")) + # Custom colors
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +  # Date formatting
theme_minimal() +  # Clean theme
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
shippings_time <- ggplot(shipping_days_time_data, aes(x = Date.Order, y = TotalQuantity)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date", y = "Total Quantity ordered", title = "Evolution of quantity ordered per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
shippings_time
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +   # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) +  # Line for DaysScheduled
labs(
x = "Date", y = "Days",
title = "Evolution of Days: Real vs Scheduled",
color = "Legend"
) +
scale_color_manual(values = c("Days Real" = "blue", "Days Scheduled" = "green")) + # Custom colors
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +  # Date formatting
theme_minimal() +  # Clean theme
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
shippings_time
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "blue", size = 1, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "green", size = 1, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_minimal() +  # Clean theme
labs(
x = "Date", y = "Days",
title = "Evolution of Real vs Scheduled Days per Month",
color = "Legend"
) +
scale_color_manual(values = c("Days Real" = "blue", "Days Scheduled" = "green")) + # Custom colors
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +  # Date formatting
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
shippings_time
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 1, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 1, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_minimal() +  # Clean theme
labs(
x = "Date", y = "Days",
title = "Evolution of Real vs Scheduled Days per Month",
color = "Legend"
) +
scale_color_manual(values = c("Days Real" = "blue", "Days Scheduled" = "green")) + # Custom colors
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +  # Date formatting
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
shippings_time
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) + # Line for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_minimal() +  # Clean theme
labs(
x = "Date", y = "Days",
title = "Evolution of Real vs Scheduled Days per Month",
color = "Legend"
) +
scale_color_manual(values = c("Days Real" = "blue", "Days Scheduled" = "green")) + # Custom colors
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +  # Date formatting
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
shippings_time
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_minimal() +  # Clean theme
labs(
x = "Date", y = "Days",
title = "Evolution of Real vs Scheduled Days per Month",
color = "Legend"
) +
scale_color_manual(values = c("Days Real" = "blue", "Days Scheduled" = "green")) + # Custom colors
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +  # Date formatting
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
)
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "Days Real"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "Days Scheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_clean() +
labs(x = "Date", y = "Total Quantity ordered", title = "Evolution of quantity ordered per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "blue"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "red"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_clean() +
labs(x = "Date", y = "Total Days Expected VS Total Days Real", title = "Total Days Expected VS Total Days Real To ship") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "blue"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "red"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_clean() +
labs(x = "Date Shipments", y = "Total Days Expected VS Total Days Real", title = "Total Days Expected VS Total Days Real To ship") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "DaysReal"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "DaysScheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_clean() +
labs(x = "Date Shipment", y = "Total Days Expected VS Total Days Real", title = "Total Days Expected VS Total Days Real To ship") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
# Group data by order and compute the frequency of orders
order_data <- data %>%
mutate(Date.Order = as.Date(as.POSIXct(order.date..DateOrders., format = "%m/%d/%Y %H:%M"))) %>%
group_by(Date.Order) %>%
summarise(TotalOrders = n())
orders_time <- ggplot(order_data, aes(x = Date.Order, y = TotalOrders)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date Order", y = "Total Orders", title = "Evolution of Orders per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#_____________________BENEFIT_OVER_TIME______________________________#
benefit_data <- data %>%
mutate(Date.Order = as.Date(as.POSIXct(order.date..DateOrders., format = "%m/%d/%Y %H:%M"))) %>%
group_by(Date.Order) %>%
summarise(TotalBenefit = sum(Benefit.per.order))
benefit_time <- ggplot(benefit_data, aes(x = Date.Order, y = TotalBenefit)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date Order", y = "Total Benefit", title = "Evolution of Benefit per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sales_time <- ggplot(sales_time_data, aes(x = Date.Order, y = TotalSales)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date Order", y = "Total Sales", title = "Evolution of Sales per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#_____________________sALES_OVER_TIME______________________________#
sales_time_data <- data %>%
mutate(Date.Order = as.Date(as.POSIXct(order.date..DateOrders., format = "%m/%d/%Y %H:%M"))) %>%
group_by(Date.Order) %>%
summarise(TotalSales = sum(Sales))
price_time <- ggplot(price_time_data, aes(x = Date.Order, y = TotalPrice)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date Order", y = "Total price", title = "Evolution of price per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
price_time
#_____________________PRICE_OVER_TIME______________________________#
price_time_data <- data %>%
mutate(Date.Order = as.Date(as.POSIXct(order.date..DateOrders., format = "%m/%d/%Y %H:%M"))) %>%
group_by(Date.Order) %>%
summarise(TotalPrice = sum(Product.Price))
#_____________________QUANTITY_OVER_TIME______________________________#
quantity_time_data <- data %>%
mutate(Date.Order = as.Date(as.POSIXct(order.date..DateOrders., format = "%m/%d/%Y %H:%M"))) %>%
group_by(Date.Order) %>%
summarise(TotalQuantity = sum(Order.Item.Quantity))
quantity_time <- ggplot(quantity_time_data, aes(x = Date.Order, y = TotalQuantity)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 1, alpha = 0.7) +
geom_smooth(color = "black", size = 1) +
theme_clean() +
labs(x = "Date Order", y = "Total Quantity ordered", title = "Evolution of quantity ordered per month") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time )
timeseries_plot
#_____________________DAYS_TO_SHIP_OVER_TIME______________________________#
shipping_days_time_data <- data %>%
mutate(Shipping.Order = as.Date(as.POSIXct(shipping.date..DateOrders., format = "%m/%d/%Y %H:%M"))) %>%
group_by(Shipping.Order) %>%
summarise(DaysReal = sum(Days.for.shipping..real.),
DaysScheduled = sum(Days.for.shipment..scheduled.)
)
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "DaysReal"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "DaysScheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_clean() +
labs(x = "Date Shipment", y = "Total Days Expected VS Total Days Real", title = "Total Days Expected VS Total Days Real Shipment") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
quantity_time
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
# Plotting both time series with points and smooth line
shippings_time <- ggplot(shipping_days_time_data, aes(x = Shipping.Order)) +
geom_line(aes(y = DaysReal, color = "DaysReal"), size = 1) +         # Line for DaysReal
geom_line(aes(y = DaysScheduled, color = "DaysScheduled"), size = 1) + # Line for DaysScheduled
geom_point(aes(y = DaysReal), color = "black", size = 0.5, alpha = 0.7) +  # Points for DaysReal
geom_point(aes(y = DaysScheduled), color = "black", size = 0.5, alpha = 0.7) + # Points for DaysScheduled
geom_smooth(aes(y = DaysReal), color = "black", size = 1, se = FALSE) +  # Smoothed line for DaysReal
theme_clean() +
labs(x = "Date Shipment", y = "Total Days Expected VS Total Days Real", title = "Evolution of Total Days Expected VS Total Days Real Shipment") +
scale_x_date(date_labels = "%Y-%m-%d", date_breaks = "1 month") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
timeseries_plot <- ggarrange(orders_time,
quantity_time,
price_time,
sales_time,
benefit_time,
shippings_time, nrow = 3, ncol= 2)
timeseries_plot
data.num <- data.clean %>%
select(all_of(numeric.cols))
numeric.cols
skew.numeric.cols <- c("Sales",
"Sales.per.customer",
"Benefit.per.order",
"Product.Price",
"Order.Item.Discount",
"Order.Item.Product.Price",
"Order.Item.Profit.Ratio",
"Order.Item.Total",
"Order.Profit.Per.Order",
"Order.Item.Total")
skewness.df <- data.frame(numeric_columns = skew.numeric.cols, skewness = skews)
write.csv(skewness.df, "skewness.csv")
skew.numeric.cols <- c("Sales",
"Sales.per.customer",
"Benefit.per.order",
"Product.Price",
"Order.Item.Discount",
"Order.Item.Product.Price",
"Order.Item.Profit.Ratio",
"Order.Profit.Per.Order",
"Order.Item.Total")
sk1 <- skewness(data.clean$Sales)
sk2 <- skewness(data.clean$Sales.per.customer)
sk3 <- skewness(data.clean$Benefit.per.order)
sk4 <- skewness(data.clean$Product.Price)
sk5 <- skewness(data.clean$Order.Item.Discount)
sk8 <- skewness(data.clean$Order.Item.Total)
sk7 <- skewness(data.clean$Order.Item.Profit.Ratio)
sk9 <- skewness(data.clean$Order.Profit.Per.Order)
sk6 <- skewness(data.clean$Order.Item.Product.Price)
sk10 <- skewness(data.clean$Order.Item.Total)
skews <- c(sk1,sk2,sk3,sk4,sk5,sk6,sk7,sk8,sk9,sk10)
skewness.df <- data.frame(numeric_columns = skew.numeric.cols, skewness = skews)
write.csv(skewness.df, "skewness.csv")
sk8 <- skewness(data.clean$Order.Profit.Per.Order)
sk9 <- skewness(data.clean$Order.Item.Total)
skews <- c(sk1,sk2,sk3,sk4,sk5,sk6,sk7,sk8,sk9)
skewness.df <- data.frame(numeric_columns = skew.numeric.cols, skewness = skews)
write.csv(skewness.df, "skewness.csv")
str(data.clean)
numeric.cols <- c("Sales",
"Sales.per.customer",
"Benefit.per.order",
"Product.Price",
"Order.Item.Discount",
"Order.Item.Product.Price",
"Order.Item.Total",
"Order.Profit.Per.Order")
data.num <- data.clean %>%
select(all_of(numeric.cols))
pca <- prcomp(data.num, scale = T)
fviz_eig(pca, addlabels=TRUE, hjust = -0.3,
linecolor ="red") + theme_minimal()
#=======================UNSUPERVISED_LEARNING=========================#
library(factoextra)
fviz_eig(pca, addlabels=TRUE, hjust = -0.3,
linecolor ="red") + theme_minimal()
install.packages(c("cluster","mclust"))
#______________________CLUSTERING________________________________________#
library(cluster)
library(mclust)
data.num
str(data.num)
fit <- kmeans(data.num, nstart = 1000)
fit <- kmeans(data.num,centers = k, nstart = 1000)
k = 5
k = 5
fit <- kmeans(data.num,centers = k, nstart = 1000)
data.scaled <- scale(data.num)
data.scaled <- scale(data.num)
fit <- kmeans(data.scaled, centers = k, nstart = 1000)
fviz_nbclust(data.num, kmeans, method = "wss")
fit$cluster
fviz_cluster(data.num)
fviz_cluster(fit)
fviz_cluster(data.scaled, fit)
fviz_cluster(data.scaled, fit)
fviz_cluster(fit, data = data.scaled, geom = "point")
centers <- fit$centers
barplot(centers[,1], las=2)
barplot(centers[,2], las=2)
clus_plot <- fviz_cluster(fit, data = data.scaled, geom = "point") +
theme_clean()
clus_plot
elbow_plot <- fviz_nbclust(data.scaled, kmeans, method = "wss")
wss <- function(k) {
kmeans(data.scaled, centers = k, nstart = 10)$tot.withinss
}
k_values <- 1:10
wss_values <- sapply(k_values, wss)
plot(k_values, wss_values, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters K", ylab = "Total within-clusters sum of squares")
head(wss_values)
kvalues
k_values
ggplot(aes(x = k_values, y = wss_values)) +
geom_point()
ggplot(aes(x = k_values, y = wss_values)) +
geom_point()
data.scaled %>% ggplot(aes(x = k_values, y = wss_values)) +
geom_point()
ggplot(1:10,aes(x = k_values, y = wss_values)) +
geom_point()
wss_valies
wss_values
elbow_df <- data.frame(k = k_values, wss = wss_values)
ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point()
ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
theme_clean()
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
theme_clean()
elbow_plot
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
theme_clean()
elbow_plo
elbow_plot
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
scale_x_discrete(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_plot
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
scale_x_continous(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_df
elbow_plot
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
geom_vline(mapping = 5)
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
geom_vline(5)
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
geom_vline(5)+
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
geom_vline(xintercept = 5, linetype = "dashed", color = "red", size = 1) +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_;pt
elbow_plo
elbow_plot
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
geom_vline(xintercept = 5, linetype = "dashed", color = "red", size = 1) +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot Kmeans") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_plot <- ggplot(elbow_df,aes(x = k, y = wss_values)) +
geom_point() +
geom_line() +
geom_vline(xintercept = 5, linetype = "dashed", color = "red", size = 1) +
labs(x = "Number of Clusters", y = "Total Within Cluster Sum of Squares", title = "Elbow Plot Kmeans") +
scale_x_continuous(breaks=seq(0, 10, 1)) +
theme_clean()
elbow_plot
clus_plot <- fviz_cluster(fit, data = data.scaled, geom = "point") +
theme_clean()
clus_plot
q()
q()
